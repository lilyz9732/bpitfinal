'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var shared = require('./shared');

/**
 * @class
 * In order to issue or transfer asset units on a blockchain, a transaction is
 * created in Chain Core and sent to the HSM for signing. The HSM signs the
 * transaction without ever revealing the private key. Once signed, the
 * transaction can be submitted to the blockchain successfully.
 * 
 * More info: {@link https://chain.com/docs/core/build-applications/keys}
 */

var HsmSigner = function () {

  /**
   * Create a new HSM signer object.
   *
   * @returns {HsmSigner}
   */
  function HsmSigner() {
    _classCallCheck(this, HsmSigner);

    this.signers = {};
  }

  /**
   * addKey - Add a new key/signer pair to the HSM signer.
   *
   * @param {Object|String} key - An object with an xpub key, or an xpub as a string.
   * @param {Connection} connection - Authenticated connection to a specific HSM instance.
   * @returns {void}
   */


  _createClass(HsmSigner, [{
    key: 'addKey',
    value: function addKey(key, connection) {
      var id = connection.baseUrl + '-' + (connection.token || 'noauth');
      var signer = this.signers[id];
      if (!signer) {
        signer = this.signers[id] = {
          connection: connection,
          xpubs: []
        };
      }

      signer.xpubs.push(typeof key == 'string' ? key : key.xpub);
    }

    /**
     * sign - Sign a single transaction.
     *
     * @param {Object} template - A single transaction template.
     * @param {objectCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
     * @returns {Object} Transaction template with all possible signatures added.
     */

  }, {
    key: 'sign',
    value: function sign(template, cb) {
      var _this = this;

      var promise = Promise.resolve(template);

      // Return early if no signers
      if (Object.keys(this.signers).length == 0) {
        return shared.tryCallback(promise, cb);
      }

      var _loop = function _loop(signerId) {
        var signer = _this.signers[signerId];

        promise = promise.then(function (nextTemplate) {
          return signer.connection.request('/sign-transaction', {
            transactions: [nextTemplate],
            xpubs: signer.xpubs
          });
        }).then(function (resp) {
          return resp[0];
        });
      };

      for (var signerId in this.signers) {
        _loop(signerId);
      }

      return shared.tryCallback(promise, cb);
    }

    /**
     * signBatch - Sign a batch of transactions.
     *
     * @param {Array<Object>} templates Array of transaction templates.
     * @param {objectCallback} [callback] - Optional callback. Use instead of Promise return value as desired.
     * @returns {BatchResponse} Tranasaction templates with all possible signatures
     *                         added, as well as errors.
     */

  }, {
    key: 'signBatch',
    value: function signBatch(templates, cb) {
      var _this2 = this;

      templates = templates.filter(function (template) {
        return template != null;
      });
      var promise = Promise.resolve(templates);

      // Return early if no signers
      if (Object.keys(this.signers).length == 0) {
        return shared.tryCallback(promise.then(function () {
          return new shared.BatchResponse(templates);
        }), cb);
      }

      var originalIndex = [].concat(_toConsumableArray(Array(templates.length).keys()));
      var errors = [];

      var _loop2 = function _loop2(signerId) {
        var nextTemplates = [];
        var nextOriginalIndex = [];
        var signer = _this2.signers[signerId];

        promise = promise.then(function (txTemplates) {
          return signer.connection.request('/sign-transaction', {
            transactions: txTemplates,
            xpubs: signer.xpubs
          }).then(function (resp) {
            var batchResponse = new shared.BatchResponse(resp);

            batchResponse.successes.forEach(function (template, index) {
              nextTemplates.push(template);
              nextOriginalIndex.push(originalIndex[index]);
            });

            batchResponse.errors.forEach(function (error, index) {
              errors[originalIndex[index]] = error;
            });

            originalIndex = nextOriginalIndex;
            return nextTemplates;
          });
        });
      };

      for (var signerId in this.signers) {
        _loop2(signerId);
      }

      return shared.tryCallback(promise.then(function (txTemplates) {
        var resp = [];
        txTemplates.forEach(function (item, index) {
          resp[originalIndex[index]] = item;
        });

        errors.forEach(function (error, index) {
          if (error != null) {
            resp[index] = error;
          }
        });

        return new shared.BatchResponse(resp);
      }), cb);
    }
  }]);

  return HsmSigner;
}();

module.exports = HsmSigner;