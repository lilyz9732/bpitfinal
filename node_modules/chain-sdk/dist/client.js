'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Connection = require('./connection');
var authorizationGrantsAPI = require('./api/authorizationGrants');
var accessTokensAPI = require('./api/accessTokens');
var accountsAPI = require('./api/accounts');
var assetsAPI = require('./api/assets');
var balancesAPI = require('./api/balances');
var configAPI = require('./api/config');
var mockHsmKeysAPI = require('./api/mockHsmKeys');
var transactionsAPI = require('./api/transactions');
var transactionFeedsAPI = require('./api/transactionFeeds');
var unspentOutputsAPI = require('./api/unspentOutputs');

/**
 * The Chain API Client object is the root object for all API interactions.
 * To interact with Chain Core, a Client object must always be instantiated
 * first.
 * @class
 */

var Client = function () {
  /**
   * constructor - create a new Chain client object capable of interacting with
   * the specified Chain Core.
   *
   * Passing a configuration object is the preferred way of calling this constructor.
   * However, to support code written for 1.1 and older, the constructor supports passing
   * in a string URL and an optional string token as the first and second parameter, respectively.
   *
   * @param {Object} opts - Plain JS object containing configuration options.
   * @param {String} opts.url - Chain Core URL.
   * @param {String} opts.accessToken - Chain Core access token.
   * @returns {Client}
   */
  function Client() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Client);

    // If the first argument is a string,
    // support the deprecated constructor params.
    if (typeof opts === 'string') {
      opts = {
        url: arguments[0],
        accessToken: arguments[1] || ''
      };
    }
    opts.url = opts.url || 'http://localhost:1999';
    this.connection = new Connection(opts.url, opts.accessToken, opts.agent);

    /**
     * API actions for access tokens
     * @type {module:AccessTokensApi}
     */
    this.accessTokens = accessTokensAPI(this);

    /**
     * API actions for access control grants
     * @type {module:AuthorizationGrantsApi}
     */
    this.authorizationGrants = authorizationGrantsAPI(this);

    /**
     * API actions for accounts
     * @type {module:AccountsApi}
     */
    this.accounts = accountsAPI(this);

    /**
     * API actions for assets.
     * @type {module:AssetsApi}
     */
    this.assets = assetsAPI(this);

    /**
     * API actions for balances.
     * @type {module:BalancesApi}
     */
    this.balances = balancesAPI(this);

    /**
     * API actions for config.
     * @type {module:ConfigApi}
     */
    this.config = configAPI(this);

    /**
     * @property {module:MockHsmKeysApi} keys API actions for MockHSM keys.
     * @property {Connection} signerConnection MockHSM signer connection.
     */
    this.mockHsm = {
      keys: mockHsmKeysAPI(this),
      signerConnection: new Connection(opts.url + '/mockhsm', opts.accessToken, opts.agent)
    };

    /**
     * API actions for transactions.
     * @type {module:TransactionsApi}
     */
    this.transactions = transactionsAPI(this);

    /**
     * API actions for transaction feeds.
     * @type {module:TransactionFeedsApi}
     */
    this.transactionFeeds = transactionFeedsAPI(this);

    /**
     * API actions for unspent outputs.
     * @type {module:UnspentOutputsApi}
     */
    this.unspentOutputs = unspentOutputsAPI(this);
  }

  /**
   * Submit a request to the stored Chain Core connection.
   *
   * @param {String} path
   * @param {object} [body={}]
   * @returns {Promise}
   */


  _createClass(Client, [{
    key: 'request',
    value: function request(path) {
      var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.connection.request(path, body);
    }
  }]);

  return Client;
}();

module.exports = Client;